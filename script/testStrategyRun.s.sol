// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import "forge-std/Script.sol";
import "src/diamond/facets/diamond-core/DiamondCutFacet.sol";
import "src/diamond/facets/diamond-core/DiamondLoupeFacet.sol";
import "src/diamond/facets/diamond-core/OwnershipFacet.sol";
import "src/diamond/facets/core/AccessControl.sol";
import "src/diamond/facets/core/Execution.sol";
import "src/diamond/facets/core/GasManager.sol";
import "src/diamond/facets/core/Factory.sol";
import "src/diamond/facets/core/TokenStash.sol";
import "src/diamond/facets/core/Users.sol";
import "src/diamond/Diamond.sol";
import "src/diamond/interfaces/IDiamond.sol";
import "src/diamond/interfaces/IDiamondCut.sol";
import "src/diamond/interfaces/IDiamondLoupe.sol";
import "src/diamond/interfaces/IERC165.sol";
import "src/diamond/interfaces/IERC173.sol";
import "src/diamond/upgradeInitializers/DiamondInit.sol";
import "test/diamond/HelperContract.sol";
import "forge-std/console.sol";

contract TestStrategyFully is Script, HelperContract {
    function run() external {
        //read env variables and choose EOA for transaction signing
        uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");

        vm.startBroadcast(deployerPrivateKey);

        Diamond diamond = Diamond(
            payable(0xbAF45B60F69eCa4616CdE172D3961C156946e831)
        );
        Vault vaultAddress = Vault(0xD403d9B940F6cb222C8BbB101699f710331Cb288);

        GasManagerFacet(address(diamond)).fundGasBalance{value: 0.001 ether}(
            address(vaultAddress)
        );

        ERC20(0xfc5A1A6EB076a2C7aD06eD22C90d7E710E35ad0a).approve(
            address(vaultAddress),
            type(uint256).max
        );

        uint256 requiredGas = vaultAddress.approxDepositGas() * 2;

        vaultAddress.deposit{value: requiredGas}(1 * 10 ** 16);

        Vault[] memory strategies = StrategiesViewerFacet(address(diamond))
            .getStrategiesList();

        uint256 idx = 50000;

        for (uint256 i; i < strategies.length; i++)
            if (address(strategies[i]) == address(vaultAddress)) {
                idx = i;
                break;
            }

        require(idx != 50000, "Didnt find strat");

        console.log("after loop");

        bool[][] memory check = TriggersManagerFacet(address(diamond))
            .checkStrategiesTriggers();

        console.log("Chec Length", check.length);

        if (!check[idx][0]) revert("Trigger Not Ready So Cannot Execute");

        for (uint256 i; i < check.length; i++)
            for (uint256 j; j < check[i].length; j++) console.log(check[i][j]);

        uint256[] memory indices = new uint256[](1);

        indices[0] = idx;

        TriggersManagerFacet(address(diamond)).executeStrategiesTriggers(
            indices,
            check
        );

        vaultAddress.withdraw{value: requiredGas}(1 * 10 ** 16);

        // address(diamond).call(
        //     hex"4d7133ec00000000000000000000000036040f67111a7fc2b4dc86d06783809116d4aab5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006e2060000000000000000000000000000000000000000000000000000000000000000200000000000000000000000001231deb6f5749ef6ce6943a275a1d3e7486f4eae00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000620000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000000220000da9b133b3f5ce05228dc2d8134bf0c3322858ff55b235d6d04bbeae0aab5182a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006201010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000d7969656c64636861696e2e696f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008201010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002a307830303030303030303030303030303030303030303030303030303030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000036040f67111a7fc2b4dc86d06783809116d4aab50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000b9118d255c3138000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022201010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000001111111254eeb25477b68fb85ed929f73a960582000000000000000000000000fc5a1a6eb076a2c7ad06ed22c90d7e710e35ad0a00000000000000000000000018c11fd286c5ec11c3b683caa813b77f5163a1220000000000000000000000000000000000000000000000000011c37937e0800000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a8e449022e0000000000000000000000000000000000000000000000000011c37937e0800000000000000000000000000000000000000000000000000000b9118d255c3137000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000018000000000000000000000003884312c7711e857dea4278883cf91a042ce03df2e9b3012000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006f73776170546f6b656e7347656e6572696328627974657333322c737472696e672c737472696e672c616464726573732c75696e743235362c28616464726573732c616464726573732c616464726573732c616464726573732c75696e743235362c62797465732c626f6f6c295b5d290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        // );

        vm.stopBroadcast();
    }
}

// forge script ./script/testStrategyRun.s.sol:TestStrategyFully --chain-id 42161 --fork-url $ARBITRUM_RPC_URL --broadcast -vvvv --ffi
